/* autogenerated by Processing revision 1296 on 2025-03-22 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class mandelbrot extends PApplet {

//graph size
float minX = -2;
float maxX = 2;
float minY = -1.5f;
float maxY = 1.5f;

//max iterations
int maxiter = 100;

//user input:
//Ellie's palette: #006699, #ae82fa, #f261b1, #ffb433
int[] colorPicks = {0xFF006699, 0xFFAE82FA, 0xFFF261B1, 0xFFFFB433};
String variety = "mandelbrot";

int myColor = 0;

//funky filter
boolean filterOn = false;
float nsmooth;

public void setup(){
  //4:3 ratio
  /* size commented out by preprocessor */;
  //hue saturation brightness
  colorMode(HSB);
}

public void draw(){
  loadPixels();
  
  //pixel mapping and mandelbrot math from https://thecodingtrain.com/challenges/21-mandelbrot-set-with-p5js
  //for each pixel
  for (int x = 0; x < width; x++) {
    for (int y = 0; y < height; y++) {
      
      //puts math on a smaller interval
      var a = map(x, 0, width, minX, maxX);
      var b = map(y, 0, height, minY, maxY);
      
     //number of iterations
      int n = 0;
      
      //mandelbrot
      n = myMandelbrot(a, b, n);
           
      //pixel location within a 1d array
      int location = (x + y*width);
      addColor(n, location);
      }  
    }
    updatePixels();
}

public int myMandelbrot (float a, float b, int n){
  /*
  Mandelbrot Fractal function
  Takes in complex number a+bi and max number of iterations n
  Returns how many iterations were completed, n
  */
  
  //real component
  var start_real = a;
  //imaginary component
  var start_i = b;
  
  //makes faster by setting center of mandelblobs to max iterations
  if (((a + .25f)*(a + .25f) + .81f*b*b <= .25f) || ((a+1)*(a+1) + b*b <= .06f)){
    n = maxiter;
  }
  
  while (n < maxiter) {
    //(a+bi)^2 = a^2 + 2abi - b^2
    // real component
    var new_real = a*a - b*b;
    //imaginary component
    var new_i = 2*a*b;
    
    //next iteration components
    a = new_real + start_real;
    b = new_i + start_i;
    
    //checks if point is going towards infinity
    if (a*a + b*b > 4) {
      break;
    }
    //increments iteration counter
    n++;
  }
  //funky filter component
  if (filterOn){
    nsmooth = n + 1 - log(log(abs(a)))/log(2);
  }
  return n;
}
public void addColor(int n, int location){
  
  //grayscale color scheme if no given colors
  if (colorPicks.length == 0) {
    myColor = color(map(n, 0, maxiter, 0, 250));
    
  //one color given
  }else if (colorPicks.length == 1){
    myColor = colorPicks[0];
    myColor = color(hue(myColor), saturation(myColor), map(n, 0, maxiter, 0, 255));
    
  //multiple colors given
  }else{
    int numColors = colorPicks.length;
    for (int i=0; i < numColors; i++){
      //divides number of iterations into groups based on number of colors
      if (n >= (i*maxiter)/numColors && n <= ((i+1)*maxiter)/numColors) {
        myColor = colorPicks[i];
      }
    }
  }
  if (filterOn){ 
    //https://stackoverflow.com/questions/369438/smooth-spectrum-for-mandelbrot-set-rendering
    myColor = color(.95f*hue(myColor) + 10*nsmooth, .6f*saturation(myColor), brightness(myColor));
  }
    
  //sets pixel color
  pixels[location] = color(myColor);
}
//Julia constant not needed for mandelbrot, but needed to save .zeep
float juliaReal = 0;
float juliaImag = 0;

public void saveImage(){
  //creates "unique" file name based on date and time
  String fileName = "myFractal" + String.valueOf(month()) + "_" + String.valueOf(day()) + "_" 
                    + String.valueOf(hour()) + String.valueOf(minute()) + String.valueOf(second())+ ".png";
  //saves to sketch folder
  save(fileName);
  println("Image saved as " + fileName);
}

public void saveZeep(){
  //saves fractal info to a .zeep file
  String [] fracFacts = {variety, str(minX), str(maxX), str(minY), str(maxY), str(juliaReal), str(juliaImag)};
  for (int i = 0; i < colorPicks.length; i++){
    String strColor = str(colorPicks[i]);
    fracFacts = append(fracFacts, strColor);
  }
  saveStrings("fractal.zeep", fracFacts);
  println("Fractal saved as 'fractal.zeep'");
}


public void loadZeep(){
  //loads .zeep file to regenerate fractal
 String [] loadedFrac = loadStrings("fractal.zeep"); 
 
 variety = loadedFrac[0];
 
 minX = PApplet.parseFloat(loadedFrac[1]);
 maxX = PApplet.parseFloat(loadedFrac[2]);
 minY = PApplet.parseFloat(loadedFrac[3]);
 maxY = PApplet.parseFloat(loadedFrac[4]);
 
 juliaReal = PApplet.parseFloat(loadedFrac[5]);
 juliaImag = PApplet.parseFloat(loadedFrac[6]);
 
 int [] loadColors = {};
 for (int i = 7; i < loadedFrac.length; i++){
   loadColors = (int[]) append(loadColors, color(PApplet.parseInt(loadedFrac[i])));
 }
 colorPicks = loadColors;
 
 println("'fractal.zeep' loaded");
}
public void keyPressed(){
  //center point in window
  float xCenter = (minX + maxX)/2;
  float yCenter = (minY + maxY)/2;
  
  float rangex = maxX - minX;
  //zoom factor
  float zoomIn = .3f * rangex;
  float zoomOut = .9f * rangex;
  
  //reset window view
  if (key == 'h' || key == 'H'){
    resetView();
  }      
  //zoom in
  if (key == '+' || key == '=') {
    minX = xCenter - zoomIn;
    maxX = xCenter + zoomIn;
    minY = yCenter - .8f*zoomIn;
    maxY = yCenter + .8f*zoomIn;
  }
  //zoom out
  if (key == '_' || key == '-') {
    minX = xCenter - zoomOut;
    maxX = xCenter + zoomOut;
    minY = yCenter - .8f*zoomOut;
    maxY = yCenter + .8f*zoomOut;
  }
  //save as image
  if (key == 's' || key == 'S'){
    saveImage();
  }
  //save as .zeep
  if (key == 'z' || key == 'Z'){
    saveZeep();
  }  
  //load .zeep
  if (key == 'l' || key == 'L'){
    loadZeep();
  }
  if (key == 'f' || key == 'F'){
    filterOn = !filterOn;
  }    
}

public void mouseDragged(){
  //rate of change of movement based on scale of graph
  float delta = .0025f * abs(maxX - minX);
  
  //determines direction mouse is moving in
  if (pmouseX < mouseX) {
    //shifts range that window sees
    minX = minX - delta;
    maxX = maxX - delta;
  }
  if (pmouseX > mouseX) {
    minX = minX + delta;
    maxX = maxX + delta;
  }
    if (pmouseY < mouseY) {
    minY = minY - delta;
    maxY = maxY - delta;
  }
  if (pmouseY > mouseY) {
    minY = minY + delta;
    maxY = maxY + delta;
  } 
}

public void resetView(){
  //reset window view
  minX = -2;
  maxX = 2;
  minY = -1.5f;
  maxY = 1.5f;
}


  public void settings() { size(1400, 1050); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "mandelbrot" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
