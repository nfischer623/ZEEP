package com.example.fractalprototype;

/* autogenerated by Processing revision 1295 on 2025-01-27 */
import javafx.scene.paint.Color;
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class ProcessingSketch extends PApplet {
    private final FractalModel model;
    private final int sketchWidth, sketchHeight;
    int[] colorPicks = new int[4];

    public ProcessingSketch(FractalModel model, int width, int height) {
        this.model = model;
        this.sketchWidth = width;
        this.sketchHeight = height;
        // default palette: #006699, #ae82fa, #f261b1, #ffb433
        // {0xFF006699, 0xFFAE82FA, 0xFFF261B1, 0xFFFFB433}
        updateColors(false);
    }

    // this needs some work - needs safer rounding in case colors get weird
    public void updateColors(boolean isRedraw) {
        colorPicks[0] = model.getColorProcessingValue(model.getColorA());
        colorPicks[1] = model.getColorProcessingValue(model.getColorB());
        colorPicks[2] = model.getColorProcessingValue(model.getColorC());
        colorPicks[3] = model.getColorProcessingValue(model.getColorD());
        
        if (isRedraw) {
            redraw();
        }
    }

    public void setup() {
        surface.setSize(sketchWidth, sketchHeight);
        surface.setLocation(displayWidth / 3, (displayHeight - sketchHeight) / 2);
        // NOTE: this will implicitly truncate any non-int results
        // may want to make explicit in the future
    }

    //graph size
    float minx = -2.5f;
    float maxx = 1.5f;
    float miny = -1.5f;
    float maxy = 1.5f;

    //max iterations
    int maxiter = 100;

    public void mouseDragged(){
        //rate of change of movement based on scale of graph
        float delta = .0025f * abs(maxx - minx);

        //determines direction mouse is moving in
        if (pmouseX < mouseX) {
            //shifts range that window sees
            minx = minx - delta;
            maxx = maxx - delta;
        }
        if (pmouseX > mouseX) {
            minx = minx + delta;
            maxx = maxx + delta;
        }
        if (pmouseY < mouseY) {
            miny = miny - delta;
            maxy = maxy - delta;
        }
        if (pmouseY > mouseY) {
            miny = miny + delta;
            maxy = maxy + delta;
        }

    }

    public void keyPressed(){
        //center point in window
        float xCenter = (minx + maxx)/2;
        float yCenter = (miny + maxy)/2;

        float rangex = maxx - minx;
        //zoom factor
        float zoomIn = .3f * rangex;
        float zoomOut = .9f * rangex;

        //zoom in
        if (key == '+' || key == '=') {
            minx = xCenter - zoomIn;
            maxx = xCenter + zoomIn;
            miny = yCenter - .8f*zoomIn;
            maxy = yCenter + .8f*zoomIn;
        }
        //zoom out
        if (key == '_' || key == '-') {
            minx = xCenter - zoomOut;
            maxx = xCenter + zoomOut;
            miny = yCenter - .8f*zoomOut;
            maxy = yCenter + .8f*zoomOut;
        }
        if (key == 'c' || key == 'C'){
            println("Min X: ", minx, "Max X: ", maxx, "Min Y: ", miny, "Max Y: ", maxy);
        }
    }


    public void draw() {
        loadPixels();

        //https://thecodingtrain.com/challenges/21-mandelbrot-set-with-p5js
        //for each pixel
        for (int x = 0; x < width; x++) {
            for (int y = 0; y < height; y++) {

                //puts math on a smaller interval
                var a = map(x, 0, width, minx, maxx);
                var b = map(y, 0, height, miny, maxy);

                //number of iterations
                var n = 0;

                //real component
                var origa = a;
                //imaginary component
                var origb = b;

                //makes faster by setting center of mandelblobs to max iterations
                if (((a + .25f)*(a + .25f) + .81f*b*b <= .25f) || ((a+1)*(a+1) + b*b <= .06f)){
                    n = maxiter;
                }

                while (n < maxiter) {
                    //(a+bi)^2 = a^2 + 2abi - b^2
                    // real component
                    var newreal = a*a - b*b;
                    //imaginary component
                    var newcomplex = 2*a*b;

                    //next iteration components
                    a = newreal + origa;
                    b = newcomplex + origb;

                    //checks if point is going towards infinity
                    if (a*a + b*b > 4) {
                        break;
                    }
                    //increments iteration counter
                    n++;
                }

                //pixel location within a 1d array
                int location = (x + y*width);

                //grayscale color scheme if no given colors
                if (colorPicks.length == 0) {
                    var grayscale=map(n, 0, 100, 0, 250);
                    //sets pixel color
                    pixels[location]=color(grayscale);
                }

                //color scheme given user's picks
                if (colorPicks.length > 0) {
                    var myColor = 0;

                    int numColors = colorPicks.length;
                    for (int i=0; i<numColors; i++){
                        //divides number of iterations into groups based on number of colors
                        if (n >= (i*maxiter)/numColors && n <= ((i+1)*maxiter)/numColors) {
                            myColor=colorPicks[i];
                        }
                    }
                    //sets pixel color
                    pixels[location]=color(myColor);
                }

            }
        }
        updatePixels();
    }


    public void settings() { size(1400, 1050); }

//    static public void main(String[] passedArgs) {
//        String[] appletArgs = new String[] { "mandelbrot" };
//        if (passedArgs != null) {
//            PApplet.main(concat(appletArgs, passedArgs));
//        } else {
//            PApplet.main(appletArgs);
//        }
//    }
}